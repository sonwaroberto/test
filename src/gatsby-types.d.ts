/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'childImageSharp.children'
  | 'childImageSharp.children.children'
  | 'childImageSharp.children.children.children'
  | 'childImageSharp.children.children.id'
  | 'childImageSharp.children.id'
  | 'childImageSharp.children.internal.content'
  | 'childImageSharp.children.internal.contentDigest'
  | 'childImageSharp.children.internal.contentFilePath'
  | 'childImageSharp.children.internal.description'
  | 'childImageSharp.children.internal.fieldOwners'
  | 'childImageSharp.children.internal.ignoreType'
  | 'childImageSharp.children.internal.mediaType'
  | 'childImageSharp.children.internal.owner'
  | 'childImageSharp.children.internal.type'
  | 'childImageSharp.children.parent.children'
  | 'childImageSharp.children.parent.id'
  | 'childImageSharp.fixed.aspectRatio'
  | 'childImageSharp.fixed.base64'
  | 'childImageSharp.fixed.height'
  | 'childImageSharp.fixed.originalName'
  | 'childImageSharp.fixed.src'
  | 'childImageSharp.fixed.srcSet'
  | 'childImageSharp.fixed.srcSetWebp'
  | 'childImageSharp.fixed.srcWebp'
  | 'childImageSharp.fixed.tracedSVG'
  | 'childImageSharp.fixed.width'
  | 'childImageSharp.fluid.aspectRatio'
  | 'childImageSharp.fluid.base64'
  | 'childImageSharp.fluid.originalImg'
  | 'childImageSharp.fluid.originalName'
  | 'childImageSharp.fluid.presentationHeight'
  | 'childImageSharp.fluid.presentationWidth'
  | 'childImageSharp.fluid.sizes'
  | 'childImageSharp.fluid.src'
  | 'childImageSharp.fluid.srcSet'
  | 'childImageSharp.fluid.srcSetWebp'
  | 'childImageSharp.fluid.srcWebp'
  | 'childImageSharp.fluid.tracedSVG'
  | 'childImageSharp.gatsbyImageData'
  | 'childImageSharp.id'
  | 'childImageSharp.internal.content'
  | 'childImageSharp.internal.contentDigest'
  | 'childImageSharp.internal.contentFilePath'
  | 'childImageSharp.internal.description'
  | 'childImageSharp.internal.fieldOwners'
  | 'childImageSharp.internal.ignoreType'
  | 'childImageSharp.internal.mediaType'
  | 'childImageSharp.internal.owner'
  | 'childImageSharp.internal.type'
  | 'childImageSharp.original.height'
  | 'childImageSharp.original.src'
  | 'childImageSharp.original.width'
  | 'childImageSharp.parent.children'
  | 'childImageSharp.parent.children.children'
  | 'childImageSharp.parent.children.id'
  | 'childImageSharp.parent.id'
  | 'childImageSharp.parent.internal.content'
  | 'childImageSharp.parent.internal.contentDigest'
  | 'childImageSharp.parent.internal.contentFilePath'
  | 'childImageSharp.parent.internal.description'
  | 'childImageSharp.parent.internal.fieldOwners'
  | 'childImageSharp.parent.internal.ignoreType'
  | 'childImageSharp.parent.internal.mediaType'
  | 'childImageSharp.parent.internal.owner'
  | 'childImageSharp.parent.internal.type'
  | 'childImageSharp.parent.parent.children'
  | 'childImageSharp.parent.parent.id'
  | 'childImageSharp.resize.aspectRatio'
  | 'childImageSharp.resize.height'
  | 'childImageSharp.resize.originalName'
  | 'childImageSharp.resize.src'
  | 'childImageSharp.resize.tracedSVG'
  | 'childImageSharp.resize.width'
  | 'children'
  | 'childrenImageSharp'
  | 'childrenImageSharp.children'
  | 'childrenImageSharp.children.children'
  | 'childrenImageSharp.children.children.children'
  | 'childrenImageSharp.children.children.id'
  | 'childrenImageSharp.children.id'
  | 'childrenImageSharp.children.internal.content'
  | 'childrenImageSharp.children.internal.contentDigest'
  | 'childrenImageSharp.children.internal.contentFilePath'
  | 'childrenImageSharp.children.internal.description'
  | 'childrenImageSharp.children.internal.fieldOwners'
  | 'childrenImageSharp.children.internal.ignoreType'
  | 'childrenImageSharp.children.internal.mediaType'
  | 'childrenImageSharp.children.internal.owner'
  | 'childrenImageSharp.children.internal.type'
  | 'childrenImageSharp.children.parent.children'
  | 'childrenImageSharp.children.parent.id'
  | 'childrenImageSharp.fixed.aspectRatio'
  | 'childrenImageSharp.fixed.base64'
  | 'childrenImageSharp.fixed.height'
  | 'childrenImageSharp.fixed.originalName'
  | 'childrenImageSharp.fixed.src'
  | 'childrenImageSharp.fixed.srcSet'
  | 'childrenImageSharp.fixed.srcSetWebp'
  | 'childrenImageSharp.fixed.srcWebp'
  | 'childrenImageSharp.fixed.tracedSVG'
  | 'childrenImageSharp.fixed.width'
  | 'childrenImageSharp.fluid.aspectRatio'
  | 'childrenImageSharp.fluid.base64'
  | 'childrenImageSharp.fluid.originalImg'
  | 'childrenImageSharp.fluid.originalName'
  | 'childrenImageSharp.fluid.presentationHeight'
  | 'childrenImageSharp.fluid.presentationWidth'
  | 'childrenImageSharp.fluid.sizes'
  | 'childrenImageSharp.fluid.src'
  | 'childrenImageSharp.fluid.srcSet'
  | 'childrenImageSharp.fluid.srcSetWebp'
  | 'childrenImageSharp.fluid.srcWebp'
  | 'childrenImageSharp.fluid.tracedSVG'
  | 'childrenImageSharp.gatsbyImageData'
  | 'childrenImageSharp.id'
  | 'childrenImageSharp.internal.content'
  | 'childrenImageSharp.internal.contentDigest'
  | 'childrenImageSharp.internal.contentFilePath'
  | 'childrenImageSharp.internal.description'
  | 'childrenImageSharp.internal.fieldOwners'
  | 'childrenImageSharp.internal.ignoreType'
  | 'childrenImageSharp.internal.mediaType'
  | 'childrenImageSharp.internal.owner'
  | 'childrenImageSharp.internal.type'
  | 'childrenImageSharp.original.height'
  | 'childrenImageSharp.original.src'
  | 'childrenImageSharp.original.width'
  | 'childrenImageSharp.parent.children'
  | 'childrenImageSharp.parent.children.children'
  | 'childrenImageSharp.parent.children.id'
  | 'childrenImageSharp.parent.id'
  | 'childrenImageSharp.parent.internal.content'
  | 'childrenImageSharp.parent.internal.contentDigest'
  | 'childrenImageSharp.parent.internal.contentFilePath'
  | 'childrenImageSharp.parent.internal.description'
  | 'childrenImageSharp.parent.internal.fieldOwners'
  | 'childrenImageSharp.parent.internal.ignoreType'
  | 'childrenImageSharp.parent.internal.mediaType'
  | 'childrenImageSharp.parent.internal.owner'
  | 'childrenImageSharp.parent.internal.type'
  | 'childrenImageSharp.parent.parent.children'
  | 'childrenImageSharp.parent.parent.id'
  | 'childrenImageSharp.resize.aspectRatio'
  | 'childrenImageSharp.resize.height'
  | 'childrenImageSharp.resize.originalName'
  | 'childrenImageSharp.resize.src'
  | 'childrenImageSharp.resize.tracedSVG'
  | 'childrenImageSharp.resize.width'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'fixed.aspectRatio'
  | 'fixed.base64'
  | 'fixed.height'
  | 'fixed.originalName'
  | 'fixed.src'
  | 'fixed.srcSet'
  | 'fixed.srcSetWebp'
  | 'fixed.srcWebp'
  | 'fixed.tracedSVG'
  | 'fixed.width'
  | 'fluid.aspectRatio'
  | 'fluid.base64'
  | 'fluid.originalImg'
  | 'fluid.originalName'
  | 'fluid.presentationHeight'
  | 'fluid.presentationWidth'
  | 'fluid.sizes'
  | 'fluid.src'
  | 'fluid.srcSet'
  | 'fluid.srcSetWebp'
  | 'fluid.srcWebp'
  | 'fluid.tracedSVG'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'original.height'
  | 'original.src'
  | 'original.width'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resize.aspectRatio'
  | 'resize.height'
  | 'resize.originalName'
  | 'resize.src'
  | 'resize.tracedSVG'
  | 'resize.width';

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'excerpt'
  | 'excerptAst'
  | 'frontmatter.title'
  | 'headings'
  | 'headings.depth'
  | 'headings.id'
  | 'headings.value'
  | 'html'
  | 'htmlAst'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'rawMarkdownBody'
  | 'tableOfContents'
  | 'timeToRead'
  | 'wordCount.paragraphs'
  | 'wordCount.sentences'
  | 'wordCount.words';

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStrapiBwAsset: STRAPI_BW_ASSETConnection;
  readonly allStrapiBwAssetValueTextnode: STRAPI_BW_ASSET_VALUE_TEXTNODEConnection;
  readonly allStrapiBwImage: STRAPI_BW_IMAGEConnection;
  readonly allStrapiBwPage: STRAPI_BW_PAGEConnection;
  readonly allStrapiMedia: STRAPI__MEDIAConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly strapiBwAsset: Maybe<STRAPI_BW_ASSET>;
  readonly strapiBwAssetValueTextnode: Maybe<STRAPI_BW_ASSET_VALUE_TEXTNODE>;
  readonly strapiBwImage: Maybe<STRAPI_BW_IMAGE>;
  readonly strapiBwPage: Maybe<STRAPI_BW_PAGE>;
  readonly strapiMedia: Maybe<STRAPI__MEDIA>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ImageSharpSortInput>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MarkdownRemarkSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_allStrapiBwAssetArgs = {
  filter: InputMaybe<STRAPI_BW_ASSETFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_BW_ASSETSortInput>;
};


type Query_allStrapiBwAssetValueTextnodeArgs = {
  filter: InputMaybe<STRAPI_BW_ASSET_VALUE_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_BW_ASSET_VALUE_TEXTNODESortInput>;
};


type Query_allStrapiBwImageArgs = {
  filter: InputMaybe<STRAPI_BW_IMAGEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_BW_IMAGESortInput>;
};


type Query_allStrapiBwPageArgs = {
  filter: InputMaybe<STRAPI_BW_PAGEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI_BW_PAGESortInput>;
};


type Query_allStrapiMediaArgs = {
  filter: InputMaybe<STRAPI__MEDIAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<STRAPI__MEDIASortInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiBwAssetArgs = {
  bw_page: InputMaybe<STRAPI_BW_PAGEFilterInput>;
  childStrapiBwAssetValueTextnode: InputMaybe<STRAPI_BW_ASSET_VALUE_TEXTNODEFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenStrapiBwAssetValueTextnode: InputMaybe<STRAPI_BW_ASSET_VALUE_TEXTNODEFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  key: InputMaybe<StringQueryOperatorInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_BW_ASSETLocalizationsFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  value: InputMaybe<STRAPI_BW_ASSETValueFilterInput>;
};


type Query_strapiBwAssetValueTextnodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  value: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiBwImageArgs = {
  brand: InputMaybe<StringQueryOperatorInput>;
  bw_page: InputMaybe<STRAPI_BW_PAGEFilterInput>;
  car_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  color: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  key: InputMaybe<StringQueryOperatorInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_BW_IMAGELocalizationsFilterInput>;
  model: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  price: InputMaybe<IntQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiBwPageArgs = {
  bw_assets: InputMaybe<STRAPI_BW_ASSETFilterListInput>;
  bw_images: InputMaybe<STRAPI_BW_IMAGEFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  localizations: InputMaybe<STRAPI_BW_PAGELocalizationsFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  tite: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  uri: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiMediaArgs = {
  alternativeText: InputMaybe<StringQueryOperatorInput>;
  caption: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mime: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  size: InputMaybe<FloatQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_BW_ASSET = Node & {
  readonly bw_page: Maybe<STRAPI_BW_PAGE>;
  /** Returns the first child node of type STRAPI_BW_ASSET_VALUE_TEXTNODE or null if there are no children of given type on this node */
  readonly childStrapiBwAssetValueTextnode: Maybe<STRAPI_BW_ASSET_VALUE_TEXTNODE>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type STRAPI_BW_ASSET_VALUE_TEXTNODE */
  readonly childrenStrapiBwAssetValueTextnode: Maybe<ReadonlyArray<Maybe<STRAPI_BW_ASSET_VALUE_TEXTNODE>>>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly key: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_BW_ASSETLocalizations>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly value: Maybe<STRAPI_BW_ASSETValue>;
};


type STRAPI_BW_ASSET_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_ASSET_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_ASSET_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_BW_ASSETConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BW_ASSETEdge>;
  readonly group: ReadonlyArray<STRAPI_BW_ASSETGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BW_ASSET>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BW_ASSETConnection_distinctArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
};


type STRAPI_BW_ASSETConnection_groupArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BW_ASSETConnection_maxArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
};


type STRAPI_BW_ASSETConnection_minArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
};


type STRAPI_BW_ASSETConnection_sumArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
};

type STRAPI_BW_ASSETEdge = {
  readonly next: Maybe<STRAPI_BW_ASSET>;
  readonly node: STRAPI_BW_ASSET;
  readonly previous: Maybe<STRAPI_BW_ASSET>;
};

type STRAPI_BW_ASSETFieldsEnum =
  | 'bw_page.bw_assets'
  | 'bw_page.bw_assets.bw_page.bw_assets'
  | 'bw_page.bw_assets.bw_page.bw_images'
  | 'bw_page.bw_assets.bw_page.children'
  | 'bw_page.bw_assets.bw_page.createdAt'
  | 'bw_page.bw_assets.bw_page.id'
  | 'bw_page.bw_assets.bw_page.locale'
  | 'bw_page.bw_assets.bw_page.publishedAt'
  | 'bw_page.bw_assets.bw_page.strapi_id'
  | 'bw_page.bw_assets.bw_page.tite'
  | 'bw_page.bw_assets.bw_page.updatedAt'
  | 'bw_page.bw_assets.bw_page.uri'
  | 'bw_page.bw_assets.childStrapiBwAssetValueTextnode.children'
  | 'bw_page.bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark'
  | 'bw_page.bw_assets.childStrapiBwAssetValueTextnode.id'
  | 'bw_page.bw_assets.childStrapiBwAssetValueTextnode.value'
  | 'bw_page.bw_assets.children'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode.children'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode.id'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode.value'
  | 'bw_page.bw_assets.children.children'
  | 'bw_page.bw_assets.children.id'
  | 'bw_page.bw_assets.createdAt'
  | 'bw_page.bw_assets.id'
  | 'bw_page.bw_assets.internal.content'
  | 'bw_page.bw_assets.internal.contentDigest'
  | 'bw_page.bw_assets.internal.contentFilePath'
  | 'bw_page.bw_assets.internal.description'
  | 'bw_page.bw_assets.internal.fieldOwners'
  | 'bw_page.bw_assets.internal.ignoreType'
  | 'bw_page.bw_assets.internal.mediaType'
  | 'bw_page.bw_assets.internal.owner'
  | 'bw_page.bw_assets.internal.type'
  | 'bw_page.bw_assets.key'
  | 'bw_page.bw_assets.locale'
  | 'bw_page.bw_assets.localizations.data'
  | 'bw_page.bw_assets.parent.children'
  | 'bw_page.bw_assets.parent.id'
  | 'bw_page.bw_assets.publishedAt'
  | 'bw_page.bw_assets.strapi_id'
  | 'bw_page.bw_assets.updatedAt'
  | 'bw_page.bw_images'
  | 'bw_page.bw_images.brand'
  | 'bw_page.bw_images.bw_page.bw_assets'
  | 'bw_page.bw_images.bw_page.bw_images'
  | 'bw_page.bw_images.bw_page.children'
  | 'bw_page.bw_images.bw_page.createdAt'
  | 'bw_page.bw_images.bw_page.id'
  | 'bw_page.bw_images.bw_page.locale'
  | 'bw_page.bw_images.bw_page.publishedAt'
  | 'bw_page.bw_images.bw_page.strapi_id'
  | 'bw_page.bw_images.bw_page.tite'
  | 'bw_page.bw_images.bw_page.updatedAt'
  | 'bw_page.bw_images.bw_page.uri'
  | 'bw_page.bw_images.car_image.alternativeText'
  | 'bw_page.bw_images.car_image.caption'
  | 'bw_page.bw_images.car_image.children'
  | 'bw_page.bw_images.car_image.createdAt'
  | 'bw_page.bw_images.car_image.ext'
  | 'bw_page.bw_images.car_image.hash'
  | 'bw_page.bw_images.car_image.height'
  | 'bw_page.bw_images.car_image.id'
  | 'bw_page.bw_images.car_image.mime'
  | 'bw_page.bw_images.car_image.name'
  | 'bw_page.bw_images.car_image.size'
  | 'bw_page.bw_images.car_image.strapi_id'
  | 'bw_page.bw_images.car_image.updatedAt'
  | 'bw_page.bw_images.car_image.url'
  | 'bw_page.bw_images.car_image.width'
  | 'bw_page.bw_images.children'
  | 'bw_page.bw_images.children.children'
  | 'bw_page.bw_images.children.id'
  | 'bw_page.bw_images.color'
  | 'bw_page.bw_images.createdAt'
  | 'bw_page.bw_images.id'
  | 'bw_page.bw_images.internal.content'
  | 'bw_page.bw_images.internal.contentDigest'
  | 'bw_page.bw_images.internal.contentFilePath'
  | 'bw_page.bw_images.internal.description'
  | 'bw_page.bw_images.internal.fieldOwners'
  | 'bw_page.bw_images.internal.ignoreType'
  | 'bw_page.bw_images.internal.mediaType'
  | 'bw_page.bw_images.internal.owner'
  | 'bw_page.bw_images.internal.type'
  | 'bw_page.bw_images.key'
  | 'bw_page.bw_images.locale'
  | 'bw_page.bw_images.localizations.data'
  | 'bw_page.bw_images.model'
  | 'bw_page.bw_images.parent.children'
  | 'bw_page.bw_images.parent.id'
  | 'bw_page.bw_images.price'
  | 'bw_page.bw_images.publishedAt'
  | 'bw_page.bw_images.strapi_id'
  | 'bw_page.bw_images.updatedAt'
  | 'bw_page.children'
  | 'bw_page.children.children'
  | 'bw_page.children.children.children'
  | 'bw_page.children.children.id'
  | 'bw_page.children.id'
  | 'bw_page.children.internal.content'
  | 'bw_page.children.internal.contentDigest'
  | 'bw_page.children.internal.contentFilePath'
  | 'bw_page.children.internal.description'
  | 'bw_page.children.internal.fieldOwners'
  | 'bw_page.children.internal.ignoreType'
  | 'bw_page.children.internal.mediaType'
  | 'bw_page.children.internal.owner'
  | 'bw_page.children.internal.type'
  | 'bw_page.children.parent.children'
  | 'bw_page.children.parent.id'
  | 'bw_page.createdAt'
  | 'bw_page.id'
  | 'bw_page.internal.content'
  | 'bw_page.internal.contentDigest'
  | 'bw_page.internal.contentFilePath'
  | 'bw_page.internal.description'
  | 'bw_page.internal.fieldOwners'
  | 'bw_page.internal.ignoreType'
  | 'bw_page.internal.mediaType'
  | 'bw_page.internal.owner'
  | 'bw_page.internal.type'
  | 'bw_page.locale'
  | 'bw_page.localizations.data'
  | 'bw_page.localizations.data.id'
  | 'bw_page.parent.children'
  | 'bw_page.parent.children.children'
  | 'bw_page.parent.children.id'
  | 'bw_page.parent.id'
  | 'bw_page.parent.internal.content'
  | 'bw_page.parent.internal.contentDigest'
  | 'bw_page.parent.internal.contentFilePath'
  | 'bw_page.parent.internal.description'
  | 'bw_page.parent.internal.fieldOwners'
  | 'bw_page.parent.internal.ignoreType'
  | 'bw_page.parent.internal.mediaType'
  | 'bw_page.parent.internal.owner'
  | 'bw_page.parent.internal.type'
  | 'bw_page.parent.parent.children'
  | 'bw_page.parent.parent.id'
  | 'bw_page.publishedAt'
  | 'bw_page.strapi_id'
  | 'bw_page.tite'
  | 'bw_page.updatedAt'
  | 'bw_page.uri'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.children'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.children.children'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.children.id'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.excerpt'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.excerptAst'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.frontmatter.title'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.headings'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.headings.depth'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.headings.id'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.headings.value'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.html'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.htmlAst'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.id'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.internal.content'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.internal.contentDigest'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.internal.contentFilePath'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.internal.description'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.internal.fieldOwners'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.internal.ignoreType'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.internal.mediaType'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.internal.owner'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.internal.type'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.parent.children'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.parent.id'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.rawMarkdownBody'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.tableOfContents'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.timeToRead'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.wordCount.paragraphs'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.wordCount.sentences'
  | 'childStrapiBwAssetValueTextnode.childMarkdownRemark.wordCount.words'
  | 'childStrapiBwAssetValueTextnode.children'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.children'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.children.children'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.children.id'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.excerpt'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.excerptAst'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.frontmatter.title'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings.depth'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings.id'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings.value'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.html'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.htmlAst'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.id'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.content'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.contentDigest'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.contentFilePath'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.description'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.fieldOwners'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.ignoreType'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.mediaType'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.owner'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.type'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.parent.children'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.parent.id'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.rawMarkdownBody'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.tableOfContents'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.timeToRead'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.wordCount.paragraphs'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.wordCount.sentences'
  | 'childStrapiBwAssetValueTextnode.childrenMarkdownRemark.wordCount.words'
  | 'childStrapiBwAssetValueTextnode.children.children'
  | 'childStrapiBwAssetValueTextnode.children.children.children'
  | 'childStrapiBwAssetValueTextnode.children.children.id'
  | 'childStrapiBwAssetValueTextnode.children.id'
  | 'childStrapiBwAssetValueTextnode.children.internal.content'
  | 'childStrapiBwAssetValueTextnode.children.internal.contentDigest'
  | 'childStrapiBwAssetValueTextnode.children.internal.contentFilePath'
  | 'childStrapiBwAssetValueTextnode.children.internal.description'
  | 'childStrapiBwAssetValueTextnode.children.internal.fieldOwners'
  | 'childStrapiBwAssetValueTextnode.children.internal.ignoreType'
  | 'childStrapiBwAssetValueTextnode.children.internal.mediaType'
  | 'childStrapiBwAssetValueTextnode.children.internal.owner'
  | 'childStrapiBwAssetValueTextnode.children.internal.type'
  | 'childStrapiBwAssetValueTextnode.children.parent.children'
  | 'childStrapiBwAssetValueTextnode.children.parent.id'
  | 'childStrapiBwAssetValueTextnode.id'
  | 'childStrapiBwAssetValueTextnode.internal.content'
  | 'childStrapiBwAssetValueTextnode.internal.contentDigest'
  | 'childStrapiBwAssetValueTextnode.internal.contentFilePath'
  | 'childStrapiBwAssetValueTextnode.internal.description'
  | 'childStrapiBwAssetValueTextnode.internal.fieldOwners'
  | 'childStrapiBwAssetValueTextnode.internal.ignoreType'
  | 'childStrapiBwAssetValueTextnode.internal.mediaType'
  | 'childStrapiBwAssetValueTextnode.internal.owner'
  | 'childStrapiBwAssetValueTextnode.internal.type'
  | 'childStrapiBwAssetValueTextnode.parent.children'
  | 'childStrapiBwAssetValueTextnode.parent.children.children'
  | 'childStrapiBwAssetValueTextnode.parent.children.id'
  | 'childStrapiBwAssetValueTextnode.parent.id'
  | 'childStrapiBwAssetValueTextnode.parent.internal.content'
  | 'childStrapiBwAssetValueTextnode.parent.internal.contentDigest'
  | 'childStrapiBwAssetValueTextnode.parent.internal.contentFilePath'
  | 'childStrapiBwAssetValueTextnode.parent.internal.description'
  | 'childStrapiBwAssetValueTextnode.parent.internal.fieldOwners'
  | 'childStrapiBwAssetValueTextnode.parent.internal.ignoreType'
  | 'childStrapiBwAssetValueTextnode.parent.internal.mediaType'
  | 'childStrapiBwAssetValueTextnode.parent.internal.owner'
  | 'childStrapiBwAssetValueTextnode.parent.internal.type'
  | 'childStrapiBwAssetValueTextnode.parent.parent.children'
  | 'childStrapiBwAssetValueTextnode.parent.parent.id'
  | 'childStrapiBwAssetValueTextnode.value'
  | 'children'
  | 'childrenStrapiBwAssetValueTextnode'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.children'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.children.children'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.children.id'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.excerpt'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.excerptAst'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.frontmatter.title'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.headings'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.headings.depth'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.headings.id'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.headings.value'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.html'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.htmlAst'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.id'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.internal.content'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.internal.contentDigest'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.internal.contentFilePath'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.internal.description'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.internal.fieldOwners'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.internal.ignoreType'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.internal.mediaType'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.internal.owner'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.internal.type'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.parent.children'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.parent.id'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.rawMarkdownBody'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.tableOfContents'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.timeToRead'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.wordCount.paragraphs'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.wordCount.sentences'
  | 'childrenStrapiBwAssetValueTextnode.childMarkdownRemark.wordCount.words'
  | 'childrenStrapiBwAssetValueTextnode.children'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.children'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.children.children'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.children.id'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.excerpt'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.excerptAst'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.frontmatter.title'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings.depth'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings.id'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings.value'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.html'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.htmlAst'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.id'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.content'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.contentDigest'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.contentFilePath'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.description'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.fieldOwners'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.ignoreType'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.mediaType'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.owner'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.internal.type'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.parent.children'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.parent.id'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.rawMarkdownBody'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.tableOfContents'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.timeToRead'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.wordCount.paragraphs'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.wordCount.sentences'
  | 'childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.wordCount.words'
  | 'childrenStrapiBwAssetValueTextnode.children.children'
  | 'childrenStrapiBwAssetValueTextnode.children.children.children'
  | 'childrenStrapiBwAssetValueTextnode.children.children.id'
  | 'childrenStrapiBwAssetValueTextnode.children.id'
  | 'childrenStrapiBwAssetValueTextnode.children.internal.content'
  | 'childrenStrapiBwAssetValueTextnode.children.internal.contentDigest'
  | 'childrenStrapiBwAssetValueTextnode.children.internal.contentFilePath'
  | 'childrenStrapiBwAssetValueTextnode.children.internal.description'
  | 'childrenStrapiBwAssetValueTextnode.children.internal.fieldOwners'
  | 'childrenStrapiBwAssetValueTextnode.children.internal.ignoreType'
  | 'childrenStrapiBwAssetValueTextnode.children.internal.mediaType'
  | 'childrenStrapiBwAssetValueTextnode.children.internal.owner'
  | 'childrenStrapiBwAssetValueTextnode.children.internal.type'
  | 'childrenStrapiBwAssetValueTextnode.children.parent.children'
  | 'childrenStrapiBwAssetValueTextnode.children.parent.id'
  | 'childrenStrapiBwAssetValueTextnode.id'
  | 'childrenStrapiBwAssetValueTextnode.internal.content'
  | 'childrenStrapiBwAssetValueTextnode.internal.contentDigest'
  | 'childrenStrapiBwAssetValueTextnode.internal.contentFilePath'
  | 'childrenStrapiBwAssetValueTextnode.internal.description'
  | 'childrenStrapiBwAssetValueTextnode.internal.fieldOwners'
  | 'childrenStrapiBwAssetValueTextnode.internal.ignoreType'
  | 'childrenStrapiBwAssetValueTextnode.internal.mediaType'
  | 'childrenStrapiBwAssetValueTextnode.internal.owner'
  | 'childrenStrapiBwAssetValueTextnode.internal.type'
  | 'childrenStrapiBwAssetValueTextnode.parent.children'
  | 'childrenStrapiBwAssetValueTextnode.parent.children.children'
  | 'childrenStrapiBwAssetValueTextnode.parent.children.id'
  | 'childrenStrapiBwAssetValueTextnode.parent.id'
  | 'childrenStrapiBwAssetValueTextnode.parent.internal.content'
  | 'childrenStrapiBwAssetValueTextnode.parent.internal.contentDigest'
  | 'childrenStrapiBwAssetValueTextnode.parent.internal.contentFilePath'
  | 'childrenStrapiBwAssetValueTextnode.parent.internal.description'
  | 'childrenStrapiBwAssetValueTextnode.parent.internal.fieldOwners'
  | 'childrenStrapiBwAssetValueTextnode.parent.internal.ignoreType'
  | 'childrenStrapiBwAssetValueTextnode.parent.internal.mediaType'
  | 'childrenStrapiBwAssetValueTextnode.parent.internal.owner'
  | 'childrenStrapiBwAssetValueTextnode.parent.internal.type'
  | 'childrenStrapiBwAssetValueTextnode.parent.parent.children'
  | 'childrenStrapiBwAssetValueTextnode.parent.parent.id'
  | 'childrenStrapiBwAssetValueTextnode.value'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdAt'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'key'
  | 'locale'
  | 'localizations.data'
  | 'localizations.data.attributes.createdAt'
  | 'localizations.data.attributes.key'
  | 'localizations.data.attributes.locale'
  | 'localizations.data.attributes.publishedAt'
  | 'localizations.data.attributes.updatedAt'
  | 'localizations.data.attributes.value'
  | 'localizations.data.id'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'publishedAt'
  | 'strapi_id'
  | 'updatedAt'
  | 'value.data.childMarkdownRemark.children'
  | 'value.data.childMarkdownRemark.excerpt'
  | 'value.data.childMarkdownRemark.excerptAst'
  | 'value.data.childMarkdownRemark.headings'
  | 'value.data.childMarkdownRemark.html'
  | 'value.data.childMarkdownRemark.htmlAst'
  | 'value.data.childMarkdownRemark.id'
  | 'value.data.childMarkdownRemark.rawMarkdownBody'
  | 'value.data.childMarkdownRemark.tableOfContents'
  | 'value.data.childMarkdownRemark.timeToRead'
  | 'value.data.children'
  | 'value.data.childrenMarkdownRemark'
  | 'value.data.childrenMarkdownRemark.children'
  | 'value.data.childrenMarkdownRemark.excerpt'
  | 'value.data.childrenMarkdownRemark.excerptAst'
  | 'value.data.childrenMarkdownRemark.headings'
  | 'value.data.childrenMarkdownRemark.html'
  | 'value.data.childrenMarkdownRemark.htmlAst'
  | 'value.data.childrenMarkdownRemark.id'
  | 'value.data.childrenMarkdownRemark.rawMarkdownBody'
  | 'value.data.childrenMarkdownRemark.tableOfContents'
  | 'value.data.childrenMarkdownRemark.timeToRead'
  | 'value.data.children.children'
  | 'value.data.children.id'
  | 'value.data.id'
  | 'value.data.internal.content'
  | 'value.data.internal.contentDigest'
  | 'value.data.internal.contentFilePath'
  | 'value.data.internal.description'
  | 'value.data.internal.fieldOwners'
  | 'value.data.internal.ignoreType'
  | 'value.data.internal.mediaType'
  | 'value.data.internal.owner'
  | 'value.data.internal.type'
  | 'value.data.parent.children'
  | 'value.data.parent.id'
  | 'value.data.value';

type STRAPI_BW_ASSETFilterInput = {
  readonly bw_page: InputMaybe<STRAPI_BW_PAGEFilterInput>;
  readonly childStrapiBwAssetValueTextnode: InputMaybe<STRAPI_BW_ASSET_VALUE_TEXTNODEFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenStrapiBwAssetValueTextnode: InputMaybe<STRAPI_BW_ASSET_VALUE_TEXTNODEFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_BW_ASSETLocalizationsFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly value: InputMaybe<STRAPI_BW_ASSETValueFilterInput>;
};

type STRAPI_BW_ASSETFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_BW_ASSETFilterInput>;
};

type STRAPI_BW_ASSETGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BW_ASSETEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_BW_ASSETGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BW_ASSET>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BW_ASSETGroupConnection_distinctArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
};


type STRAPI_BW_ASSETGroupConnection_groupArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BW_ASSETGroupConnection_maxArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
};


type STRAPI_BW_ASSETGroupConnection_minArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
};


type STRAPI_BW_ASSETGroupConnection_sumArgs = {
  field: STRAPI_BW_ASSETFieldsEnum;
};

type STRAPI_BW_ASSETLocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_BW_ASSETLocalizationsData>>>;
};

type STRAPI_BW_ASSETLocalizationsData = {
  readonly attributes: Maybe<STRAPI_BW_ASSETLocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_BW_ASSETLocalizationsDataAttributes = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly key: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly value: Maybe<Scalars['String']>;
};


type STRAPI_BW_ASSETLocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_ASSETLocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_ASSETLocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_BW_ASSETLocalizationsDataAttributesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_BW_ASSETLocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_BW_ASSETLocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_BW_ASSETLocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_BW_ASSETLocalizationsDataFilterInput>;
};

type STRAPI_BW_ASSETLocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_BW_ASSETLocalizationsDataFilterListInput>;
};

type STRAPI_BW_ASSETSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BW_ASSETFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI_BW_ASSETValue = {
  readonly data: Maybe<STRAPI_BW_ASSET_VALUE_TEXTNODE>;
};

type STRAPI_BW_ASSETValueFilterInput = {
  readonly data: InputMaybe<STRAPI_BW_ASSET_VALUE_TEXTNODEFilterInput>;
};

type STRAPI_BW_ASSET_VALUE_TEXTNODE = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly value: Maybe<Scalars['String']>;
};

type STRAPI_BW_ASSET_VALUE_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BW_ASSET_VALUE_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_BW_ASSET_VALUE_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BW_ASSET_VALUE_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEConnection_groupArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEConnection_maxArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEConnection_minArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEConnection_sumArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
};

type STRAPI_BW_ASSET_VALUE_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_BW_ASSET_VALUE_TEXTNODE>;
  readonly node: STRAPI_BW_ASSET_VALUE_TEXTNODE;
  readonly previous: Maybe<STRAPI_BW_ASSET_VALUE_TEXTNODE>;
};

type STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum =
  | 'childMarkdownRemark.children'
  | 'childMarkdownRemark.children.children'
  | 'childMarkdownRemark.children.children.children'
  | 'childMarkdownRemark.children.children.id'
  | 'childMarkdownRemark.children.id'
  | 'childMarkdownRemark.children.internal.content'
  | 'childMarkdownRemark.children.internal.contentDigest'
  | 'childMarkdownRemark.children.internal.contentFilePath'
  | 'childMarkdownRemark.children.internal.description'
  | 'childMarkdownRemark.children.internal.fieldOwners'
  | 'childMarkdownRemark.children.internal.ignoreType'
  | 'childMarkdownRemark.children.internal.mediaType'
  | 'childMarkdownRemark.children.internal.owner'
  | 'childMarkdownRemark.children.internal.type'
  | 'childMarkdownRemark.children.parent.children'
  | 'childMarkdownRemark.children.parent.id'
  | 'childMarkdownRemark.excerpt'
  | 'childMarkdownRemark.excerptAst'
  | 'childMarkdownRemark.frontmatter.title'
  | 'childMarkdownRemark.headings'
  | 'childMarkdownRemark.headings.depth'
  | 'childMarkdownRemark.headings.id'
  | 'childMarkdownRemark.headings.value'
  | 'childMarkdownRemark.html'
  | 'childMarkdownRemark.htmlAst'
  | 'childMarkdownRemark.id'
  | 'childMarkdownRemark.internal.content'
  | 'childMarkdownRemark.internal.contentDigest'
  | 'childMarkdownRemark.internal.contentFilePath'
  | 'childMarkdownRemark.internal.description'
  | 'childMarkdownRemark.internal.fieldOwners'
  | 'childMarkdownRemark.internal.ignoreType'
  | 'childMarkdownRemark.internal.mediaType'
  | 'childMarkdownRemark.internal.owner'
  | 'childMarkdownRemark.internal.type'
  | 'childMarkdownRemark.parent.children'
  | 'childMarkdownRemark.parent.children.children'
  | 'childMarkdownRemark.parent.children.id'
  | 'childMarkdownRemark.parent.id'
  | 'childMarkdownRemark.parent.internal.content'
  | 'childMarkdownRemark.parent.internal.contentDigest'
  | 'childMarkdownRemark.parent.internal.contentFilePath'
  | 'childMarkdownRemark.parent.internal.description'
  | 'childMarkdownRemark.parent.internal.fieldOwners'
  | 'childMarkdownRemark.parent.internal.ignoreType'
  | 'childMarkdownRemark.parent.internal.mediaType'
  | 'childMarkdownRemark.parent.internal.owner'
  | 'childMarkdownRemark.parent.internal.type'
  | 'childMarkdownRemark.parent.parent.children'
  | 'childMarkdownRemark.parent.parent.id'
  | 'childMarkdownRemark.rawMarkdownBody'
  | 'childMarkdownRemark.tableOfContents'
  | 'childMarkdownRemark.timeToRead'
  | 'childMarkdownRemark.wordCount.paragraphs'
  | 'childMarkdownRemark.wordCount.sentences'
  | 'childMarkdownRemark.wordCount.words'
  | 'children'
  | 'childrenMarkdownRemark'
  | 'childrenMarkdownRemark.children'
  | 'childrenMarkdownRemark.children.children'
  | 'childrenMarkdownRemark.children.children.children'
  | 'childrenMarkdownRemark.children.children.id'
  | 'childrenMarkdownRemark.children.id'
  | 'childrenMarkdownRemark.children.internal.content'
  | 'childrenMarkdownRemark.children.internal.contentDigest'
  | 'childrenMarkdownRemark.children.internal.contentFilePath'
  | 'childrenMarkdownRemark.children.internal.description'
  | 'childrenMarkdownRemark.children.internal.fieldOwners'
  | 'childrenMarkdownRemark.children.internal.ignoreType'
  | 'childrenMarkdownRemark.children.internal.mediaType'
  | 'childrenMarkdownRemark.children.internal.owner'
  | 'childrenMarkdownRemark.children.internal.type'
  | 'childrenMarkdownRemark.children.parent.children'
  | 'childrenMarkdownRemark.children.parent.id'
  | 'childrenMarkdownRemark.excerpt'
  | 'childrenMarkdownRemark.excerptAst'
  | 'childrenMarkdownRemark.frontmatter.title'
  | 'childrenMarkdownRemark.headings'
  | 'childrenMarkdownRemark.headings.depth'
  | 'childrenMarkdownRemark.headings.id'
  | 'childrenMarkdownRemark.headings.value'
  | 'childrenMarkdownRemark.html'
  | 'childrenMarkdownRemark.htmlAst'
  | 'childrenMarkdownRemark.id'
  | 'childrenMarkdownRemark.internal.content'
  | 'childrenMarkdownRemark.internal.contentDigest'
  | 'childrenMarkdownRemark.internal.contentFilePath'
  | 'childrenMarkdownRemark.internal.description'
  | 'childrenMarkdownRemark.internal.fieldOwners'
  | 'childrenMarkdownRemark.internal.ignoreType'
  | 'childrenMarkdownRemark.internal.mediaType'
  | 'childrenMarkdownRemark.internal.owner'
  | 'childrenMarkdownRemark.internal.type'
  | 'childrenMarkdownRemark.parent.children'
  | 'childrenMarkdownRemark.parent.children.children'
  | 'childrenMarkdownRemark.parent.children.id'
  | 'childrenMarkdownRemark.parent.id'
  | 'childrenMarkdownRemark.parent.internal.content'
  | 'childrenMarkdownRemark.parent.internal.contentDigest'
  | 'childrenMarkdownRemark.parent.internal.contentFilePath'
  | 'childrenMarkdownRemark.parent.internal.description'
  | 'childrenMarkdownRemark.parent.internal.fieldOwners'
  | 'childrenMarkdownRemark.parent.internal.ignoreType'
  | 'childrenMarkdownRemark.parent.internal.mediaType'
  | 'childrenMarkdownRemark.parent.internal.owner'
  | 'childrenMarkdownRemark.parent.internal.type'
  | 'childrenMarkdownRemark.parent.parent.children'
  | 'childrenMarkdownRemark.parent.parent.id'
  | 'childrenMarkdownRemark.rawMarkdownBody'
  | 'childrenMarkdownRemark.tableOfContents'
  | 'childrenMarkdownRemark.timeToRead'
  | 'childrenMarkdownRemark.wordCount.paragraphs'
  | 'childrenMarkdownRemark.wordCount.sentences'
  | 'childrenMarkdownRemark.wordCount.words'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'value';

type STRAPI_BW_ASSET_VALUE_TEXTNODEFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_BW_ASSET_VALUE_TEXTNODEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_BW_ASSET_VALUE_TEXTNODEFilterInput>;
};

type STRAPI_BW_ASSET_VALUE_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BW_ASSET_VALUE_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_BW_ASSET_VALUE_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BW_ASSET_VALUE_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
};


type STRAPI_BW_ASSET_VALUE_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum;
};

type STRAPI_BW_ASSET_VALUE_TEXTNODESortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BW_ASSET_VALUE_TEXTNODEFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI_BW_IMAGE = Node & {
  readonly brand: Maybe<Scalars['String']>;
  readonly bw_page: Maybe<STRAPI_BW_PAGE>;
  readonly car_image: Maybe<STRAPI__MEDIA>;
  readonly children: ReadonlyArray<Node>;
  readonly color: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly key: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_BW_IMAGELocalizations>;
  readonly model: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly price: Maybe<Scalars['Int']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_BW_IMAGE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_IMAGE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_IMAGE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_BW_IMAGEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BW_IMAGEEdge>;
  readonly group: ReadonlyArray<STRAPI_BW_IMAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BW_IMAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BW_IMAGEConnection_distinctArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
};


type STRAPI_BW_IMAGEConnection_groupArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BW_IMAGEConnection_maxArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
};


type STRAPI_BW_IMAGEConnection_minArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
};


type STRAPI_BW_IMAGEConnection_sumArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
};

type STRAPI_BW_IMAGEEdge = {
  readonly next: Maybe<STRAPI_BW_IMAGE>;
  readonly node: STRAPI_BW_IMAGE;
  readonly previous: Maybe<STRAPI_BW_IMAGE>;
};

type STRAPI_BW_IMAGEFieldsEnum =
  | 'brand'
  | 'bw_page.bw_assets'
  | 'bw_page.bw_assets.bw_page.bw_assets'
  | 'bw_page.bw_assets.bw_page.bw_images'
  | 'bw_page.bw_assets.bw_page.children'
  | 'bw_page.bw_assets.bw_page.createdAt'
  | 'bw_page.bw_assets.bw_page.id'
  | 'bw_page.bw_assets.bw_page.locale'
  | 'bw_page.bw_assets.bw_page.publishedAt'
  | 'bw_page.bw_assets.bw_page.strapi_id'
  | 'bw_page.bw_assets.bw_page.tite'
  | 'bw_page.bw_assets.bw_page.updatedAt'
  | 'bw_page.bw_assets.bw_page.uri'
  | 'bw_page.bw_assets.childStrapiBwAssetValueTextnode.children'
  | 'bw_page.bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark'
  | 'bw_page.bw_assets.childStrapiBwAssetValueTextnode.id'
  | 'bw_page.bw_assets.childStrapiBwAssetValueTextnode.value'
  | 'bw_page.bw_assets.children'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode.children'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode.id'
  | 'bw_page.bw_assets.childrenStrapiBwAssetValueTextnode.value'
  | 'bw_page.bw_assets.children.children'
  | 'bw_page.bw_assets.children.id'
  | 'bw_page.bw_assets.createdAt'
  | 'bw_page.bw_assets.id'
  | 'bw_page.bw_assets.internal.content'
  | 'bw_page.bw_assets.internal.contentDigest'
  | 'bw_page.bw_assets.internal.contentFilePath'
  | 'bw_page.bw_assets.internal.description'
  | 'bw_page.bw_assets.internal.fieldOwners'
  | 'bw_page.bw_assets.internal.ignoreType'
  | 'bw_page.bw_assets.internal.mediaType'
  | 'bw_page.bw_assets.internal.owner'
  | 'bw_page.bw_assets.internal.type'
  | 'bw_page.bw_assets.key'
  | 'bw_page.bw_assets.locale'
  | 'bw_page.bw_assets.localizations.data'
  | 'bw_page.bw_assets.parent.children'
  | 'bw_page.bw_assets.parent.id'
  | 'bw_page.bw_assets.publishedAt'
  | 'bw_page.bw_assets.strapi_id'
  | 'bw_page.bw_assets.updatedAt'
  | 'bw_page.bw_images'
  | 'bw_page.bw_images.brand'
  | 'bw_page.bw_images.bw_page.bw_assets'
  | 'bw_page.bw_images.bw_page.bw_images'
  | 'bw_page.bw_images.bw_page.children'
  | 'bw_page.bw_images.bw_page.createdAt'
  | 'bw_page.bw_images.bw_page.id'
  | 'bw_page.bw_images.bw_page.locale'
  | 'bw_page.bw_images.bw_page.publishedAt'
  | 'bw_page.bw_images.bw_page.strapi_id'
  | 'bw_page.bw_images.bw_page.tite'
  | 'bw_page.bw_images.bw_page.updatedAt'
  | 'bw_page.bw_images.bw_page.uri'
  | 'bw_page.bw_images.car_image.alternativeText'
  | 'bw_page.bw_images.car_image.caption'
  | 'bw_page.bw_images.car_image.children'
  | 'bw_page.bw_images.car_image.createdAt'
  | 'bw_page.bw_images.car_image.ext'
  | 'bw_page.bw_images.car_image.hash'
  | 'bw_page.bw_images.car_image.height'
  | 'bw_page.bw_images.car_image.id'
  | 'bw_page.bw_images.car_image.mime'
  | 'bw_page.bw_images.car_image.name'
  | 'bw_page.bw_images.car_image.size'
  | 'bw_page.bw_images.car_image.strapi_id'
  | 'bw_page.bw_images.car_image.updatedAt'
  | 'bw_page.bw_images.car_image.url'
  | 'bw_page.bw_images.car_image.width'
  | 'bw_page.bw_images.children'
  | 'bw_page.bw_images.children.children'
  | 'bw_page.bw_images.children.id'
  | 'bw_page.bw_images.color'
  | 'bw_page.bw_images.createdAt'
  | 'bw_page.bw_images.id'
  | 'bw_page.bw_images.internal.content'
  | 'bw_page.bw_images.internal.contentDigest'
  | 'bw_page.bw_images.internal.contentFilePath'
  | 'bw_page.bw_images.internal.description'
  | 'bw_page.bw_images.internal.fieldOwners'
  | 'bw_page.bw_images.internal.ignoreType'
  | 'bw_page.bw_images.internal.mediaType'
  | 'bw_page.bw_images.internal.owner'
  | 'bw_page.bw_images.internal.type'
  | 'bw_page.bw_images.key'
  | 'bw_page.bw_images.locale'
  | 'bw_page.bw_images.localizations.data'
  | 'bw_page.bw_images.model'
  | 'bw_page.bw_images.parent.children'
  | 'bw_page.bw_images.parent.id'
  | 'bw_page.bw_images.price'
  | 'bw_page.bw_images.publishedAt'
  | 'bw_page.bw_images.strapi_id'
  | 'bw_page.bw_images.updatedAt'
  | 'bw_page.children'
  | 'bw_page.children.children'
  | 'bw_page.children.children.children'
  | 'bw_page.children.children.id'
  | 'bw_page.children.id'
  | 'bw_page.children.internal.content'
  | 'bw_page.children.internal.contentDigest'
  | 'bw_page.children.internal.contentFilePath'
  | 'bw_page.children.internal.description'
  | 'bw_page.children.internal.fieldOwners'
  | 'bw_page.children.internal.ignoreType'
  | 'bw_page.children.internal.mediaType'
  | 'bw_page.children.internal.owner'
  | 'bw_page.children.internal.type'
  | 'bw_page.children.parent.children'
  | 'bw_page.children.parent.id'
  | 'bw_page.createdAt'
  | 'bw_page.id'
  | 'bw_page.internal.content'
  | 'bw_page.internal.contentDigest'
  | 'bw_page.internal.contentFilePath'
  | 'bw_page.internal.description'
  | 'bw_page.internal.fieldOwners'
  | 'bw_page.internal.ignoreType'
  | 'bw_page.internal.mediaType'
  | 'bw_page.internal.owner'
  | 'bw_page.internal.type'
  | 'bw_page.locale'
  | 'bw_page.localizations.data'
  | 'bw_page.localizations.data.id'
  | 'bw_page.parent.children'
  | 'bw_page.parent.children.children'
  | 'bw_page.parent.children.id'
  | 'bw_page.parent.id'
  | 'bw_page.parent.internal.content'
  | 'bw_page.parent.internal.contentDigest'
  | 'bw_page.parent.internal.contentFilePath'
  | 'bw_page.parent.internal.description'
  | 'bw_page.parent.internal.fieldOwners'
  | 'bw_page.parent.internal.ignoreType'
  | 'bw_page.parent.internal.mediaType'
  | 'bw_page.parent.internal.owner'
  | 'bw_page.parent.internal.type'
  | 'bw_page.parent.parent.children'
  | 'bw_page.parent.parent.id'
  | 'bw_page.publishedAt'
  | 'bw_page.strapi_id'
  | 'bw_page.tite'
  | 'bw_page.updatedAt'
  | 'bw_page.uri'
  | 'car_image.alternativeText'
  | 'car_image.caption'
  | 'car_image.children'
  | 'car_image.children.children'
  | 'car_image.children.children.children'
  | 'car_image.children.children.id'
  | 'car_image.children.id'
  | 'car_image.children.internal.content'
  | 'car_image.children.internal.contentDigest'
  | 'car_image.children.internal.contentFilePath'
  | 'car_image.children.internal.description'
  | 'car_image.children.internal.fieldOwners'
  | 'car_image.children.internal.ignoreType'
  | 'car_image.children.internal.mediaType'
  | 'car_image.children.internal.owner'
  | 'car_image.children.internal.type'
  | 'car_image.children.parent.children'
  | 'car_image.children.parent.id'
  | 'car_image.createdAt'
  | 'car_image.ext'
  | 'car_image.formats.large.ext'
  | 'car_image.formats.large.hash'
  | 'car_image.formats.large.height'
  | 'car_image.formats.large.mime'
  | 'car_image.formats.large.name'
  | 'car_image.formats.large.size'
  | 'car_image.formats.large.url'
  | 'car_image.formats.large.width'
  | 'car_image.formats.medium.ext'
  | 'car_image.formats.medium.hash'
  | 'car_image.formats.medium.height'
  | 'car_image.formats.medium.mime'
  | 'car_image.formats.medium.name'
  | 'car_image.formats.medium.size'
  | 'car_image.formats.medium.url'
  | 'car_image.formats.medium.width'
  | 'car_image.formats.small.ext'
  | 'car_image.formats.small.hash'
  | 'car_image.formats.small.height'
  | 'car_image.formats.small.mime'
  | 'car_image.formats.small.name'
  | 'car_image.formats.small.size'
  | 'car_image.formats.small.url'
  | 'car_image.formats.small.width'
  | 'car_image.formats.thumbnail.ext'
  | 'car_image.formats.thumbnail.hash'
  | 'car_image.formats.thumbnail.height'
  | 'car_image.formats.thumbnail.mime'
  | 'car_image.formats.thumbnail.name'
  | 'car_image.formats.thumbnail.size'
  | 'car_image.formats.thumbnail.url'
  | 'car_image.formats.thumbnail.width'
  | 'car_image.hash'
  | 'car_image.height'
  | 'car_image.id'
  | 'car_image.internal.content'
  | 'car_image.internal.contentDigest'
  | 'car_image.internal.contentFilePath'
  | 'car_image.internal.description'
  | 'car_image.internal.fieldOwners'
  | 'car_image.internal.ignoreType'
  | 'car_image.internal.mediaType'
  | 'car_image.internal.owner'
  | 'car_image.internal.type'
  | 'car_image.mime'
  | 'car_image.name'
  | 'car_image.parent.children'
  | 'car_image.parent.children.children'
  | 'car_image.parent.children.id'
  | 'car_image.parent.id'
  | 'car_image.parent.internal.content'
  | 'car_image.parent.internal.contentDigest'
  | 'car_image.parent.internal.contentFilePath'
  | 'car_image.parent.internal.description'
  | 'car_image.parent.internal.fieldOwners'
  | 'car_image.parent.internal.ignoreType'
  | 'car_image.parent.internal.mediaType'
  | 'car_image.parent.internal.owner'
  | 'car_image.parent.internal.type'
  | 'car_image.parent.parent.children'
  | 'car_image.parent.parent.id'
  | 'car_image.size'
  | 'car_image.strapi_id'
  | 'car_image.updatedAt'
  | 'car_image.url'
  | 'car_image.width'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'color'
  | 'createdAt'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'key'
  | 'locale'
  | 'localizations.data'
  | 'localizations.data.attributes.brand'
  | 'localizations.data.attributes.color'
  | 'localizations.data.attributes.createdAt'
  | 'localizations.data.attributes.key'
  | 'localizations.data.attributes.locale'
  | 'localizations.data.attributes.model'
  | 'localizations.data.attributes.price'
  | 'localizations.data.attributes.publishedAt'
  | 'localizations.data.attributes.updatedAt'
  | 'localizations.data.id'
  | 'model'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'price'
  | 'publishedAt'
  | 'strapi_id'
  | 'updatedAt';

type STRAPI_BW_IMAGEFilterInput = {
  readonly brand: InputMaybe<StringQueryOperatorInput>;
  readonly bw_page: InputMaybe<STRAPI_BW_PAGEFilterInput>;
  readonly car_image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_BW_IMAGELocalizationsFilterInput>;
  readonly model: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly price: InputMaybe<IntQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_BW_IMAGEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_BW_IMAGEFilterInput>;
};

type STRAPI_BW_IMAGEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BW_IMAGEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_BW_IMAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BW_IMAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BW_IMAGEGroupConnection_distinctArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
};


type STRAPI_BW_IMAGEGroupConnection_groupArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BW_IMAGEGroupConnection_maxArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
};


type STRAPI_BW_IMAGEGroupConnection_minArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
};


type STRAPI_BW_IMAGEGroupConnection_sumArgs = {
  field: STRAPI_BW_IMAGEFieldsEnum;
};

type STRAPI_BW_IMAGELocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_BW_IMAGELocalizationsData>>>;
};

type STRAPI_BW_IMAGELocalizationsData = {
  readonly attributes: Maybe<STRAPI_BW_IMAGELocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_BW_IMAGELocalizationsDataAttributes = {
  readonly brand: Maybe<Scalars['String']>;
  readonly color: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly key: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly model: Maybe<Scalars['String']>;
  readonly price: Maybe<Scalars['Int']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_BW_IMAGELocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_IMAGELocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_IMAGELocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_BW_IMAGELocalizationsDataAttributesFilterInput = {
  readonly brand: InputMaybe<StringQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly model: InputMaybe<StringQueryOperatorInput>;
  readonly price: InputMaybe<IntQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_BW_IMAGELocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_BW_IMAGELocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_BW_IMAGELocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_BW_IMAGELocalizationsDataFilterInput>;
};

type STRAPI_BW_IMAGELocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_BW_IMAGELocalizationsDataFilterListInput>;
};

type STRAPI_BW_IMAGESortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BW_IMAGEFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI_BW_PAGE = Node & {
  readonly bw_assets: Maybe<ReadonlyArray<Maybe<STRAPI_BW_ASSET>>>;
  readonly bw_images: Maybe<ReadonlyArray<Maybe<STRAPI_BW_IMAGE>>>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly localizations: Maybe<STRAPI_BW_PAGELocalizations>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly tite: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly uri: Maybe<Scalars['String']>;
};


type STRAPI_BW_PAGE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_PAGE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_PAGE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_BW_PAGEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BW_PAGEEdge>;
  readonly group: ReadonlyArray<STRAPI_BW_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BW_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BW_PAGEConnection_distinctArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
};


type STRAPI_BW_PAGEConnection_groupArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BW_PAGEConnection_maxArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
};


type STRAPI_BW_PAGEConnection_minArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
};


type STRAPI_BW_PAGEConnection_sumArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
};

type STRAPI_BW_PAGEEdge = {
  readonly next: Maybe<STRAPI_BW_PAGE>;
  readonly node: STRAPI_BW_PAGE;
  readonly previous: Maybe<STRAPI_BW_PAGE>;
};

type STRAPI_BW_PAGEFieldsEnum =
  | 'bw_assets'
  | 'bw_assets.bw_page.bw_assets'
  | 'bw_assets.bw_page.bw_assets.children'
  | 'bw_assets.bw_page.bw_assets.childrenStrapiBwAssetValueTextnode'
  | 'bw_assets.bw_page.bw_assets.createdAt'
  | 'bw_assets.bw_page.bw_assets.id'
  | 'bw_assets.bw_page.bw_assets.key'
  | 'bw_assets.bw_page.bw_assets.locale'
  | 'bw_assets.bw_page.bw_assets.publishedAt'
  | 'bw_assets.bw_page.bw_assets.strapi_id'
  | 'bw_assets.bw_page.bw_assets.updatedAt'
  | 'bw_assets.bw_page.bw_images'
  | 'bw_assets.bw_page.bw_images.brand'
  | 'bw_assets.bw_page.bw_images.children'
  | 'bw_assets.bw_page.bw_images.color'
  | 'bw_assets.bw_page.bw_images.createdAt'
  | 'bw_assets.bw_page.bw_images.id'
  | 'bw_assets.bw_page.bw_images.key'
  | 'bw_assets.bw_page.bw_images.locale'
  | 'bw_assets.bw_page.bw_images.model'
  | 'bw_assets.bw_page.bw_images.price'
  | 'bw_assets.bw_page.bw_images.publishedAt'
  | 'bw_assets.bw_page.bw_images.strapi_id'
  | 'bw_assets.bw_page.bw_images.updatedAt'
  | 'bw_assets.bw_page.children'
  | 'bw_assets.bw_page.children.children'
  | 'bw_assets.bw_page.children.id'
  | 'bw_assets.bw_page.createdAt'
  | 'bw_assets.bw_page.id'
  | 'bw_assets.bw_page.internal.content'
  | 'bw_assets.bw_page.internal.contentDigest'
  | 'bw_assets.bw_page.internal.contentFilePath'
  | 'bw_assets.bw_page.internal.description'
  | 'bw_assets.bw_page.internal.fieldOwners'
  | 'bw_assets.bw_page.internal.ignoreType'
  | 'bw_assets.bw_page.internal.mediaType'
  | 'bw_assets.bw_page.internal.owner'
  | 'bw_assets.bw_page.internal.type'
  | 'bw_assets.bw_page.locale'
  | 'bw_assets.bw_page.localizations.data'
  | 'bw_assets.bw_page.parent.children'
  | 'bw_assets.bw_page.parent.id'
  | 'bw_assets.bw_page.publishedAt'
  | 'bw_assets.bw_page.strapi_id'
  | 'bw_assets.bw_page.tite'
  | 'bw_assets.bw_page.updatedAt'
  | 'bw_assets.bw_page.uri'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.children'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.excerpt'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.excerptAst'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.headings'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.html'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.htmlAst'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.id'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.rawMarkdownBody'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.tableOfContents'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childMarkdownRemark.timeToRead'
  | 'bw_assets.childStrapiBwAssetValueTextnode.children'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.children'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.excerpt'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.excerptAst'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.html'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.htmlAst'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.id'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.rawMarkdownBody'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.tableOfContents'
  | 'bw_assets.childStrapiBwAssetValueTextnode.childrenMarkdownRemark.timeToRead'
  | 'bw_assets.childStrapiBwAssetValueTextnode.children.children'
  | 'bw_assets.childStrapiBwAssetValueTextnode.children.id'
  | 'bw_assets.childStrapiBwAssetValueTextnode.id'
  | 'bw_assets.childStrapiBwAssetValueTextnode.internal.content'
  | 'bw_assets.childStrapiBwAssetValueTextnode.internal.contentDigest'
  | 'bw_assets.childStrapiBwAssetValueTextnode.internal.contentFilePath'
  | 'bw_assets.childStrapiBwAssetValueTextnode.internal.description'
  | 'bw_assets.childStrapiBwAssetValueTextnode.internal.fieldOwners'
  | 'bw_assets.childStrapiBwAssetValueTextnode.internal.ignoreType'
  | 'bw_assets.childStrapiBwAssetValueTextnode.internal.mediaType'
  | 'bw_assets.childStrapiBwAssetValueTextnode.internal.owner'
  | 'bw_assets.childStrapiBwAssetValueTextnode.internal.type'
  | 'bw_assets.childStrapiBwAssetValueTextnode.parent.children'
  | 'bw_assets.childStrapiBwAssetValueTextnode.parent.id'
  | 'bw_assets.childStrapiBwAssetValueTextnode.value'
  | 'bw_assets.children'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.children'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.excerpt'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.excerptAst'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.headings'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.html'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.htmlAst'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.id'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.rawMarkdownBody'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.tableOfContents'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childMarkdownRemark.timeToRead'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.children'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.children'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.excerpt'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.excerptAst'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.headings'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.html'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.htmlAst'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.id'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.rawMarkdownBody'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.tableOfContents'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.childrenMarkdownRemark.timeToRead'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.children.children'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.children.id'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.id'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.internal.content'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.internal.contentDigest'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.internal.contentFilePath'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.internal.description'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.internal.fieldOwners'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.internal.ignoreType'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.internal.mediaType'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.internal.owner'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.internal.type'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.parent.children'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.parent.id'
  | 'bw_assets.childrenStrapiBwAssetValueTextnode.value'
  | 'bw_assets.children.children'
  | 'bw_assets.children.children.children'
  | 'bw_assets.children.children.id'
  | 'bw_assets.children.id'
  | 'bw_assets.children.internal.content'
  | 'bw_assets.children.internal.contentDigest'
  | 'bw_assets.children.internal.contentFilePath'
  | 'bw_assets.children.internal.description'
  | 'bw_assets.children.internal.fieldOwners'
  | 'bw_assets.children.internal.ignoreType'
  | 'bw_assets.children.internal.mediaType'
  | 'bw_assets.children.internal.owner'
  | 'bw_assets.children.internal.type'
  | 'bw_assets.children.parent.children'
  | 'bw_assets.children.parent.id'
  | 'bw_assets.createdAt'
  | 'bw_assets.id'
  | 'bw_assets.internal.content'
  | 'bw_assets.internal.contentDigest'
  | 'bw_assets.internal.contentFilePath'
  | 'bw_assets.internal.description'
  | 'bw_assets.internal.fieldOwners'
  | 'bw_assets.internal.ignoreType'
  | 'bw_assets.internal.mediaType'
  | 'bw_assets.internal.owner'
  | 'bw_assets.internal.type'
  | 'bw_assets.key'
  | 'bw_assets.locale'
  | 'bw_assets.localizations.data'
  | 'bw_assets.localizations.data.id'
  | 'bw_assets.parent.children'
  | 'bw_assets.parent.children.children'
  | 'bw_assets.parent.children.id'
  | 'bw_assets.parent.id'
  | 'bw_assets.parent.internal.content'
  | 'bw_assets.parent.internal.contentDigest'
  | 'bw_assets.parent.internal.contentFilePath'
  | 'bw_assets.parent.internal.description'
  | 'bw_assets.parent.internal.fieldOwners'
  | 'bw_assets.parent.internal.ignoreType'
  | 'bw_assets.parent.internal.mediaType'
  | 'bw_assets.parent.internal.owner'
  | 'bw_assets.parent.internal.type'
  | 'bw_assets.parent.parent.children'
  | 'bw_assets.parent.parent.id'
  | 'bw_assets.publishedAt'
  | 'bw_assets.strapi_id'
  | 'bw_assets.updatedAt'
  | 'bw_assets.value.data.children'
  | 'bw_assets.value.data.childrenMarkdownRemark'
  | 'bw_assets.value.data.id'
  | 'bw_assets.value.data.value'
  | 'bw_images'
  | 'bw_images.brand'
  | 'bw_images.bw_page.bw_assets'
  | 'bw_images.bw_page.bw_assets.children'
  | 'bw_images.bw_page.bw_assets.childrenStrapiBwAssetValueTextnode'
  | 'bw_images.bw_page.bw_assets.createdAt'
  | 'bw_images.bw_page.bw_assets.id'
  | 'bw_images.bw_page.bw_assets.key'
  | 'bw_images.bw_page.bw_assets.locale'
  | 'bw_images.bw_page.bw_assets.publishedAt'
  | 'bw_images.bw_page.bw_assets.strapi_id'
  | 'bw_images.bw_page.bw_assets.updatedAt'
  | 'bw_images.bw_page.bw_images'
  | 'bw_images.bw_page.bw_images.brand'
  | 'bw_images.bw_page.bw_images.children'
  | 'bw_images.bw_page.bw_images.color'
  | 'bw_images.bw_page.bw_images.createdAt'
  | 'bw_images.bw_page.bw_images.id'
  | 'bw_images.bw_page.bw_images.key'
  | 'bw_images.bw_page.bw_images.locale'
  | 'bw_images.bw_page.bw_images.model'
  | 'bw_images.bw_page.bw_images.price'
  | 'bw_images.bw_page.bw_images.publishedAt'
  | 'bw_images.bw_page.bw_images.strapi_id'
  | 'bw_images.bw_page.bw_images.updatedAt'
  | 'bw_images.bw_page.children'
  | 'bw_images.bw_page.children.children'
  | 'bw_images.bw_page.children.id'
  | 'bw_images.bw_page.createdAt'
  | 'bw_images.bw_page.id'
  | 'bw_images.bw_page.internal.content'
  | 'bw_images.bw_page.internal.contentDigest'
  | 'bw_images.bw_page.internal.contentFilePath'
  | 'bw_images.bw_page.internal.description'
  | 'bw_images.bw_page.internal.fieldOwners'
  | 'bw_images.bw_page.internal.ignoreType'
  | 'bw_images.bw_page.internal.mediaType'
  | 'bw_images.bw_page.internal.owner'
  | 'bw_images.bw_page.internal.type'
  | 'bw_images.bw_page.locale'
  | 'bw_images.bw_page.localizations.data'
  | 'bw_images.bw_page.parent.children'
  | 'bw_images.bw_page.parent.id'
  | 'bw_images.bw_page.publishedAt'
  | 'bw_images.bw_page.strapi_id'
  | 'bw_images.bw_page.tite'
  | 'bw_images.bw_page.updatedAt'
  | 'bw_images.bw_page.uri'
  | 'bw_images.car_image.alternativeText'
  | 'bw_images.car_image.caption'
  | 'bw_images.car_image.children'
  | 'bw_images.car_image.children.children'
  | 'bw_images.car_image.children.id'
  | 'bw_images.car_image.createdAt'
  | 'bw_images.car_image.ext'
  | 'bw_images.car_image.hash'
  | 'bw_images.car_image.height'
  | 'bw_images.car_image.id'
  | 'bw_images.car_image.internal.content'
  | 'bw_images.car_image.internal.contentDigest'
  | 'bw_images.car_image.internal.contentFilePath'
  | 'bw_images.car_image.internal.description'
  | 'bw_images.car_image.internal.fieldOwners'
  | 'bw_images.car_image.internal.ignoreType'
  | 'bw_images.car_image.internal.mediaType'
  | 'bw_images.car_image.internal.owner'
  | 'bw_images.car_image.internal.type'
  | 'bw_images.car_image.mime'
  | 'bw_images.car_image.name'
  | 'bw_images.car_image.parent.children'
  | 'bw_images.car_image.parent.id'
  | 'bw_images.car_image.size'
  | 'bw_images.car_image.strapi_id'
  | 'bw_images.car_image.updatedAt'
  | 'bw_images.car_image.url'
  | 'bw_images.car_image.width'
  | 'bw_images.children'
  | 'bw_images.children.children'
  | 'bw_images.children.children.children'
  | 'bw_images.children.children.id'
  | 'bw_images.children.id'
  | 'bw_images.children.internal.content'
  | 'bw_images.children.internal.contentDigest'
  | 'bw_images.children.internal.contentFilePath'
  | 'bw_images.children.internal.description'
  | 'bw_images.children.internal.fieldOwners'
  | 'bw_images.children.internal.ignoreType'
  | 'bw_images.children.internal.mediaType'
  | 'bw_images.children.internal.owner'
  | 'bw_images.children.internal.type'
  | 'bw_images.children.parent.children'
  | 'bw_images.children.parent.id'
  | 'bw_images.color'
  | 'bw_images.createdAt'
  | 'bw_images.id'
  | 'bw_images.internal.content'
  | 'bw_images.internal.contentDigest'
  | 'bw_images.internal.contentFilePath'
  | 'bw_images.internal.description'
  | 'bw_images.internal.fieldOwners'
  | 'bw_images.internal.ignoreType'
  | 'bw_images.internal.mediaType'
  | 'bw_images.internal.owner'
  | 'bw_images.internal.type'
  | 'bw_images.key'
  | 'bw_images.locale'
  | 'bw_images.localizations.data'
  | 'bw_images.localizations.data.id'
  | 'bw_images.model'
  | 'bw_images.parent.children'
  | 'bw_images.parent.children.children'
  | 'bw_images.parent.children.id'
  | 'bw_images.parent.id'
  | 'bw_images.parent.internal.content'
  | 'bw_images.parent.internal.contentDigest'
  | 'bw_images.parent.internal.contentFilePath'
  | 'bw_images.parent.internal.description'
  | 'bw_images.parent.internal.fieldOwners'
  | 'bw_images.parent.internal.ignoreType'
  | 'bw_images.parent.internal.mediaType'
  | 'bw_images.parent.internal.owner'
  | 'bw_images.parent.internal.type'
  | 'bw_images.parent.parent.children'
  | 'bw_images.parent.parent.id'
  | 'bw_images.price'
  | 'bw_images.publishedAt'
  | 'bw_images.strapi_id'
  | 'bw_images.updatedAt'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdAt'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'locale'
  | 'localizations.data'
  | 'localizations.data.attributes.createdAt'
  | 'localizations.data.attributes.locale'
  | 'localizations.data.attributes.publishedAt'
  | 'localizations.data.attributes.tite'
  | 'localizations.data.attributes.updatedAt'
  | 'localizations.data.attributes.uri'
  | 'localizations.data.id'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'publishedAt'
  | 'strapi_id'
  | 'tite'
  | 'updatedAt'
  | 'uri';

type STRAPI_BW_PAGEFilterInput = {
  readonly bw_assets: InputMaybe<STRAPI_BW_ASSETFilterListInput>;
  readonly bw_images: InputMaybe<STRAPI_BW_IMAGEFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly localizations: InputMaybe<STRAPI_BW_PAGELocalizationsFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly tite: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_BW_PAGEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BW_PAGEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_BW_PAGEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BW_PAGE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BW_PAGEGroupConnection_distinctArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
};


type STRAPI_BW_PAGEGroupConnection_groupArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BW_PAGEGroupConnection_maxArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
};


type STRAPI_BW_PAGEGroupConnection_minArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
};


type STRAPI_BW_PAGEGroupConnection_sumArgs = {
  field: STRAPI_BW_PAGEFieldsEnum;
};

type STRAPI_BW_PAGELocalizations = {
  readonly data: Maybe<ReadonlyArray<Maybe<STRAPI_BW_PAGELocalizationsData>>>;
};

type STRAPI_BW_PAGELocalizationsData = {
  readonly attributes: Maybe<STRAPI_BW_PAGELocalizationsDataAttributes>;
  readonly id: Maybe<Scalars['Int']>;
};

type STRAPI_BW_PAGELocalizationsDataAttributes = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly tite: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly uri: Maybe<Scalars['String']>;
};


type STRAPI_BW_PAGELocalizationsDataAttributes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_PAGELocalizationsDataAttributes_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BW_PAGELocalizationsDataAttributes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_BW_PAGELocalizationsDataAttributesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly tite: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly uri: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_BW_PAGELocalizationsDataFilterInput = {
  readonly attributes: InputMaybe<STRAPI_BW_PAGELocalizationsDataAttributesFilterInput>;
  readonly id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_BW_PAGELocalizationsDataFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_BW_PAGELocalizationsDataFilterInput>;
};

type STRAPI_BW_PAGELocalizationsFilterInput = {
  readonly data: InputMaybe<STRAPI_BW_PAGELocalizationsDataFilterListInput>;
};

type STRAPI_BW_PAGESortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BW_PAGEFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type STRAPI__MEDIA = Node & {
  readonly alternativeText: Maybe<Scalars['String']>;
  readonly caption: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<STRAPI__MEDIAFormats>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly size: Maybe<Scalars['Float']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type STRAPI__MEDIA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI__MEDIA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI__MEDIAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAConnection_groupArgs = {
  field: STRAPI__MEDIAFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAConnection_maxArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAConnection_minArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAConnection_sumArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};

type STRAPI__MEDIAEdge = {
  readonly next: Maybe<STRAPI__MEDIA>;
  readonly node: STRAPI__MEDIA;
  readonly previous: Maybe<STRAPI__MEDIA>;
};

type STRAPI__MEDIAFieldsEnum =
  | 'alternativeText'
  | 'caption'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'createdAt'
  | 'ext'
  | 'formats.large.ext'
  | 'formats.large.hash'
  | 'formats.large.height'
  | 'formats.large.mime'
  | 'formats.large.name'
  | 'formats.large.size'
  | 'formats.large.url'
  | 'formats.large.width'
  | 'formats.medium.ext'
  | 'formats.medium.hash'
  | 'formats.medium.height'
  | 'formats.medium.mime'
  | 'formats.medium.name'
  | 'formats.medium.size'
  | 'formats.medium.url'
  | 'formats.medium.width'
  | 'formats.small.ext'
  | 'formats.small.hash'
  | 'formats.small.height'
  | 'formats.small.mime'
  | 'formats.small.name'
  | 'formats.small.size'
  | 'formats.small.url'
  | 'formats.small.width'
  | 'formats.thumbnail.ext'
  | 'formats.thumbnail.hash'
  | 'formats.thumbnail.height'
  | 'formats.thumbnail.mime'
  | 'formats.thumbnail.name'
  | 'formats.thumbnail.size'
  | 'formats.thumbnail.url'
  | 'formats.thumbnail.width'
  | 'hash'
  | 'height'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mime'
  | 'name'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'size'
  | 'strapi_id'
  | 'updatedAt'
  | 'url'
  | 'width';

type STRAPI__MEDIAFilterInput = {
  readonly alternativeText: InputMaybe<StringQueryOperatorInput>;
  readonly caption: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormats = {
  readonly large: Maybe<STRAPI__MEDIAFormatsLarge>;
  readonly medium: Maybe<STRAPI__MEDIAFormatsMedium>;
  readonly small: Maybe<STRAPI__MEDIAFormatsSmall>;
  readonly thumbnail: Maybe<STRAPI__MEDIAFormatsThumbnail>;
};

type STRAPI__MEDIAFormatsFilterInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFilterInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFilterInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFilterInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFilterInput>;
};

type STRAPI__MEDIAFormatsLarge = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsLargeFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsMedium = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsMediumFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsSmall = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsSmallFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsThumbnail = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsThumbnailFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAGroupConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAGroupConnection_groupArgs = {
  field: STRAPI__MEDIAFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAGroupConnection_maxArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAGroupConnection_minArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};


type STRAPI__MEDIAGroupConnection_sumArgs = {
  field: STRAPI__MEDIAFieldsEnum;
};

type STRAPI__MEDIASortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__MEDIAFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'graphqlTypegen.generateOnBuild'
  | 'graphqlTypegen.typesOutputPath'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.description'
  | 'siteMetadata.siteUrl'
  | 'siteMetadata.title'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGraphqlTypegen = {
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.contentFilePath'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.contentFilePath'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.contentFilePath'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type assetsQueryVariables = Exact<{ [key: string]: never; }>;


type assetsQuery = { readonly allStrapiBwAsset: { readonly nodes: ReadonlyArray<{ readonly key: string | null, readonly id: string, readonly localizations: { readonly data: ReadonlyArray<{ readonly id: number | null, readonly attributes: { readonly value: string | null, readonly key: string | null } | null } | null> | null } | null, readonly value: { readonly data: { readonly value: string | null } | null } | null }> } };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type imagesQueryVariables = Exact<{ [key: string]: never; }>;


type imagesQuery = { readonly allStrapiBwImage: { readonly nodes: ReadonlyArray<{ readonly model: string | null, readonly price: number | null, readonly id: string, readonly color: string | null, readonly brand: string | null, readonly key: string | null, readonly localizations: { readonly data: ReadonlyArray<{ readonly attributes: { readonly color: string | null } | null } | null> | null } | null, readonly car_image: { readonly url: string | null } | null }> } };


}
